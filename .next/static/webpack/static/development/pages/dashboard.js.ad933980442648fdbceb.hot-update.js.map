{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.ad933980442648fdbceb.hot-update.js","sources":["webpack:///./components/Charts/GoogleReChart.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\nimport {\n  LineChart,\n  AreaChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  BarChart,\n  Bar,\n  ComposedChart,\n  ScatterChart,\n  ZAxis\n} from \"recharts\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { wideFont, smallFont } from \"../shared/helpers\";\nimport theme from \"../theme\";\nimport ScatterC from \"./Scatter\";\nimport Button from \"../shared/Button\";\nimport { inject, observer } from \"mobx-react\";\n// import \"./recharts.css\";\n\n@inject(\"store\")\n@observer\nexport default class Example extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = { width: 0, height: 0, data: [], numTweets: 0 };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    // console.log(this.props);\n    this.setState({ currency: this.props.store.currency });\n    for (let i = 0; i < this.props.data.fetchGoogleTrend.length; i++) {\n      let newDat = {};\n      newDat[\"time\"] = this.props.data.fetchGoogleTrend[i].formattedTime;\n      newDat[\"value\"] = this.props.data.fetchGoogleTrend[i].value[0];\n\n      this.state.data.push(newDat);\n    }\n    // console.log(this.state.data);\n\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.state.currency !== this.props.store.currency) {\n      this.setState({ currency: this.props.store.currency });\n      this.state.data = [];\n      for (let i = 0; i < this.props.data.fetchGoogleTrend.length; i++) {\n        let newDat = {};\n        newDat[\"time\"] = this.props.data.fetchGoogleTrend[i].formattedTime;\n        newDat[\"value\"] = this.props.data.fetchGoogleTrend[i].value[0];\n\n        this.state.data.push(newDat);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    if (window.innerWidth < 768) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.85\n      });\n    } else if (window.innerWidth < 1024) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.85 - 179\n      });\n    } else if (window.innerWidth >= 1024) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.8 - 179\n      });\n    }\n  }\n\n  render() {\n    return (\n      <ThemeProvider theme={theme(false)}>\n        <div style={{ padding: \"10px\" }}>\n          <div\n            style={{ display: \"flex\", width: \"100%\", flexDirection: \"column\" }}\n          >\n            <LabelDiv>Google Search Traffic - {this.state.currency}</LabelDiv>\n            <NumTweetDiv>\n              based on {this.state.numTweets} tweets in the past 7 hours\n            </NumTweetDiv>\n          </div>\n          <AreaChart\n            width={this.state.chartWidth}\n            height={200}\n            data={this.state.data}\n            margin={{\n              top: 20,\n              right: 35,\n              left: 5,\n              bottom: 0\n            }}\n          >\n            <defs>\n              <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"#62BFED\" stopOpacity={0.7} />\n                <stop offset=\"95%\" stopColor=\"#62BFED\" stopOpacity={0} />\n              </linearGradient>\n            </defs>\n            <CartesianGrid stroke=\"#eee\" opacity={0} strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"time\" style={{ fontSize: \"13px\" }} />\n            <YAxis style={{ fontSize: \"13px\" }} type=\"number\" domain={[0, 1]} />\n            <Tooltip />\n\n            <Area\n              type=\"monotone\"\n              dataKey=\"value\"\n              stroke=\"#62BFED\"\n              fillOpacity={1}\n              fill=\"url(#colorPv)\"\n            />\n            {/* <Legend height={36} /> */}\n            {/* <Legend content={<CustomizedLegend external={external} />} /> */}\n            {/* <Line type=\"monotone\" dataKey=\"sentiment\" stroke=\"#82ca9d\" /> */}\n          </AreaChart>\n          <div\n            style={{\n              display: \"flex\",\n              paddingRight: \"40px\",\n              paddingLeft: \"40px\"\n            }}\n          >\n            <div style={{ marginRight: 0, marginLeft: \"auto\" }}>\n              <StyledButton>max</StyledButton>\n              <StyledButton>1 month</StyledButton>\n              <StyledButton>7 days</StyledButton>\n              <StyledButton>24 hours</StyledButton>\n            </div>\n          </div>\n        </div>\n      </ThemeProvider>\n    );\n  }\n}\n\n/* <Legend content={renderLegend} /> */\n\nconst renderLegend = props => {\n  const { payload } = props;\n  console.log(payload);\n\n  return (\n    <StyledUl>\n      {payload.map((entry, index) => (\n        <li key={`item-${index}`} style={{ display: \"flex\", margin: \"auto\" }}>\n          <Sv color={entry.color} />\n          <div style={{ marginLeft: \"7px\" }}>{entry.value}</div>\n        </li>\n      ))}\n    </StyledUl>\n  );\n};\n\nconst StyledUl = styled.ul`\n  display: flex;\n  font-size: 16px;\n  text-decoration: none;\n  margin-left: 60px;\n  list-style: none;\n  text-align: center;\n  color: ${props => props.theme.normalText};\n`;\n\nconst Sv = ({ color }) => (\n  <svg width=\"10\" height=\"10\" style={{ marginTop: \"8px\" }}>\n    <rect width=\"10\" height=\"10\" fill={color} />\n  </svg>\n);\n\nconst LabelDiv = styled.div`\n  ${smallFont}\n  margin: auto;\n  padding-left: 25px;\n`;\n\nconst NumTweetDiv = styled(LabelDiv)`\n  ${wideFont}\n  color: ${props => props.theme.mutedText};\n  font-size: 11px;\n \n`;\n\nconst StyledButton = styled(Button)`\n  padding: 3px 18px;\n  margin: 0 4px;\n  font-size: 10px;\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AA7HA;AAAA;AAgIA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AACA;AAKA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAEA;AAAA;AAKA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}